import logging

import ipcalc

from core import driver
import socket
import signal
import sys
import netifaces
import psutil


def signal_handler(sig, frame):
    print('\n\033[1;31mExiting...')
    sys.exit(0)


def get_subnets():
    nets = []
    inter = netifaces.interfaces()
    inter2 = psutil.net_if_stats()
    for i in inter:
        address = netifaces.ifaddresses(i)
        if netifaces.AF_INET in address:
            af_inet = address[netifaces.AF_INET]
            for afs in af_inet:
                if 'broadcast' in afs and inter2[i].isup:
                    s = ipcalc.Network(afs["addr"], afs["netmask"])
                    nets.append(s)
                    print("Subnet of " + str(s) + " found")
    return nets


def in_subnet(subnets, ip):
    for sub in subnets:
        if ip in sub:
            return sub
    return False


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    while True:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        interfaces = get_subnets()
        default = interfaces[0]
        subnet = str(default)
        print("\033[1;31mDefault Host Address: " + default.dq)
        print(subnet + " subnet set as default for network discover")
        # print("\n\033[1;32mChoose Starting Mode:\n\033[1;37m1: Direct\n2: Remote\n")
        # mode = input()
        code = driver.start("1", subnet)
        if code == 1:
            exit(0)
        else:
            logging.error(code)
            exit(-1)
