import re

import core.Scanning.Network.serviceDiscov as ss
import core.Scanning.Core.Device as d
import unittest


class TestPortParam(unittest.TestCase):
    # THESE PARAMS MAY NEED TO BE ADJUSTED ACCORDING TO THE NETWORK.

    device_ip = '192.168.1.64'
    device_mac = '70:8B:CD:50:46:AA'
    s = ss.serviceDiscover()
    device = d.Device(device_ip, device_mac)

    def test_scan_device_offline(self):
        self.s.tcp_range = '5-10'
        self.s.udp_range = '5-10'
        device_off = d.Device('192.168.1.19', '70:8B:CD:50:46:AB')
        self.assertFalse(self.s.scan(device_off)[1])

    def test_scan_not_open(self):
        # THESE PARAMS MAY NEED TO BE CHANGED DEPENDING ON THE HOST
        self.s.tcp_range = '30005-30011'
        self.s.udp_range = '30005-30011'
        res = self.s.scan(self.device)
        self.assertTrue(res)
        t = self.device.general_text()
        self.assertTrue(re.search("Open TCP Ports:\n", t))
        self.assertTrue(re.search("Open UDP Ports:\n", t))

    """def test_service_discov(self):
        device = d.Device('192.168.1.64', '70:8B:CD:50:46:AA')
        serviceS = ss.serviceDiscover(2, '100-180', '440-450')
        print(serviceS.scan(device))
        print(device.general_text())
        print(device.service_text())
        print("done")"""

    def test_port_lowerBound(self):
        self.assertFalse(ss.check_port_params('0-100'))

    def test_port_upperBound(self):
        self.assertFalse(ss.check_port_params('1-65536'))

    def test_port_inBound(self):
        self.assertTrue(ss.check_port_params('20-22'))

    def test_reversed(self):
        self.assertFalse(ss.check_port_params('21-20'))

    def test_improper(self):
        self.assertFalse(ss.check_port_params("21"))

    def test_improper_hyphen(self):
        self.assertFalse(ss.check_port_params("21-"))

    def test_improper_notint(self):
        self.assertFalse(ss.check_port_params("test"))

    def test_improper_notint_hyphen(self):
        self.assertFalse(ss.check_port_params("test-"))

if __name__ == "__main__":
    unittest.main()
