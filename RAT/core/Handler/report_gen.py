import datetime
from os import mkdir
from os.path import isdir


import reportlab.platypus

from core.Scanning.Core import Device
from reportlab.platypus import (Frame, PageTemplate, BaseDocTemplate, Table, Paragraph, PageBreak)
from reportlab.platypus import tableofcontents
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER

padding = dict(
    leftPadding=72,
    rightPadding=72,
    topPadding=72,
    bottomPadding=18)

portrait_frame = Frame(0, 0, *A4, **padding)
landscape_frame = Frame(0, 0, *landscape(A4), **padding)


def on_page(canvas, doc, pagesize=A4):
    page_num = canvas.getPageNumber()
    canvas.drawCentredString(pagesize[0] / 2, 50, str(page_num))


def on_page_landscape(canvas, doc):
    return on_page(canvas, doc, pagesize=landscape(A4))


portrait_template = PageTemplate(
    id='portrait',
    frames=portrait_frame,
    onPage=on_page,
    pagesize=A4)

toc = tableofcontents.TableOfContents()
toc.levelStyles = [
    ParagraphStyle(fontName='Times-Bold', fontSize=20, name='TOCHeading1', leftIndent=20, firstLineIndent=-20,
                   spaceBefore=10, leading=16),
    ParagraphStyle(fontSize=18, name='TOCHeading2', leftIndent=40, firstLineIndent=-20,
                   spaceBefore=5, leading=12),
    ParagraphStyle(fontSize=16, name='TOCHeading3', leftIndent=50, firstLineIndent=-20, spaceBefore=3,
                   leading=8)
]


def df2table(df):
    return Table(
        [[Paragraph(col) for col in df.columns]] + df.values.tolist(),
        style=[
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('LINEBELOW', (0, 0), (-1, 0), 1, colors.black),
            ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
            ('BOX', (0, 0), (-1, -1), 1, colors.black),
            ('ROWBACKGROUNDS', (0, 0), (-1, -1), [colors.lightgrey, colors.white])],
        hAlign='LEFT')


styles = getSampleStyleSheet()


class DocTemplate(BaseDocTemplate):
    def __init__(self, filename, **kw):
        super().__init__(filename, **kw)
        self.allowSplitting = 0
        template = portrait_template
        self.addPageTemplates(template)

    def afterFlowable(self, flowable):
        if flowable.__class__.__name__ == 'Paragraph':
            text = flowable.getPlainText()
            style = flowable.style.name
            if style == 'Heading1':
                level = 0
            elif style == 'Heading2':
                level = 1
            elif style == 'Heading3':
                level = 2
            else:
                return
            e = [level, text, self.page]
            bn = getattr(flowable, '_bookmarkName', None)
            if bn is not None:
                e.append(bn)
            self.notify('TOCEntry', tuple(e))


def report_gen(devices: [Device]):
    if not isdir("reports"):
        print("Reports directory not found... Creating directory.")
        mkdir("reports")
    path = "reports/" + datetime.datetime.now().__str__().replace(" ", "_")
    mkdir(path)
    for device in devices:
        doc2 = DocTemplate(path + '/' + device.ip + '.pdf')
        device_details = device.report_text()
        story = [
            Paragraph("Scan Report Device:", ParagraphStyle(name="Name", fontSize=36, alignment=TA_CENTER)),
            reportlab.platypus.Spacer(width=1, height=20),
            Paragraph(device.ip, ParagraphStyle(name="Name", fontSize=30, alignment=TA_CENTER)),
            PageBreak(),
            Paragraph('<b>Table of Contents</b>', ParagraphStyle(name="Name", fontSize=25, alignment=TA_CENTER)),
            reportlab.platypus.Spacer(width=1, height=10),
            toc,
            PageBreak(),
            Paragraph('<b>Host Details</b>', ParagraphStyle(name="Heading1", fontSize=22, alignment=TA_CENTER)),
            reportlab.platypus.Spacer(width=1, height=10)
        ]
        for details in device_details:
            story.append(Paragraph(details))
        story.append(Paragraph("<b>Services</b>", ParagraphStyle(name="Heading1", fontSize=22, alignment=TA_CENTER)))
        story.append(reportlab.platypus.Spacer(width=1, height=10))
        for service in device.tcp_services:
            story.append(Paragraph(service.product, styles['Heading2']))
            story.append(Paragraph("Service: " + service.name))
            story.append(Paragraph("Version: " + service.version))
            story.append(Paragraph("CPE: " + service.cpe))
            story.append(Paragraph("State: " + service.state))
            story.append(Paragraph("Extra: " + service.text_extra()))
            if service.vulnerabilities:
                dt = service.vulnerabilities
                story.append(Paragraph(service.product + " Vulnerabilities", styles['Heading3']))
                for vuln in dt:
                    story.append(Paragraph(vuln["id"], styles['Heading4']))
                    story.append(Paragraph(vuln["data"]))
                    story.append(Paragraph(vuln["extra"]))
                    story.append(Paragraph("Match Statistics", styles['Heading5']))
                    story.append(Paragraph("Matched Keywords: " + vuln["service"]))
                    story.append(Paragraph("Matched Versions: " + vuln["version_matches"]))
                    story.append(Paragraph("Total Matches: " + str(vuln["num_matches"])))
        doc2.multiBuild(story)
    return path
