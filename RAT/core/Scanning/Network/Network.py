import logging
import json

import nmap
from core.Scanning.Network.deviceDiscov import deviceDiscover
from core.Scanning.Network.serviceDiscov import serviceDiscover
from core.Scanning.Core.Device import Device


class NetExplorer:

    def __init__(self, subnet):
        self.covert_lvl = 3
        self.dd = deviceDiscover(subnet, lvl=self.covert_lvl)
        self.sd = serviceDiscover(lvl=self.covert_lvl)
        self.devices = []

    def getDevices(self):
        return self.devices

    def addDevice(self, device):
        for d in self.devices:
            if d.mac == device.mac:
                d.ip = device.ip
                return d, False
        self.devices.append(device)
        return device, True

    def deviceDiscover(self):
        res = self.dd.scan()
        if not res:
            return ["An issue has occurred while scanning. No new devices added.", False]
        new = 0
        for d in res:
            if self.addDevice(d)[1]:
                new = new + 1
        return [
            ("Scan Complete. Scan discovered " + str(len(res)) + " hosts, " + str(new) + " new. Total hosts at "
             + str(len(self.devices))), True]

    def man_deviceDiscover(self, ip):
        print("Starting Scan of Host address " + ip)
        res = self.dd.specific_scan(ip)
        if not res:
            return ["Host at requested address appears to be offline.", True]
        else:
            print("Host discovered at " + res.ip)
        new = 0
        if self.addDevice(res)[1]:
            new = new + 1
        return [("Scan Complete. " + str(new) + " new Host discovered. Total hosts at "
             + str(len(self.devices))), True]

    def serviceDiscov(self, tcp, udp):
        self.sd.change_tcpRange(tcp)
        self.sd.change_udpRange(udp)
        if not self.devices:
            return ["No Devices Discovered. Enter manual mode or use device discovery", False]
        res = []
        for d in self.devices:
            res.append(self.sd.scan(d))
        return [res, True]

    def tcpServiceDiscov(self, tcp):
        self.sd.change_tcpRange(tcp)
        if not self.devices:
            return ["No Devices Discovered. Enter manual mode or use device discovery", False]
        res = []
        for d in self.devices:
            res.append(self.sd.tcp_scan(tcp, d))
        return [res, True]

    def updServiceDiscov(self, udp):
        self.sd.change_udpRange(udp)
        if not self.devices:
            return ["No Devices Discovered. Enter manual mode or use device discovery", False]
        res = []
        for d in self.devices:
            res.append(self.sd.udp_scan(udp, d))
        return [res, True]

    def manServiceScan(self, device, tcp, udp):
        res = []
        dev = self.addDevice(device)[0]
        if tcp:
            res.append(self.sd.tcp_scan(tcp, dev))
        if udp:
            res.append(self.sd.udp_scan(udp, dev))
        return [res, True]

    def vulnDiscov(self):
        print()

    def covert_change(self, lvl):
        lvl = int(lvl)
        if 1 > lvl > 4:
            logging.error("Covert level out of bounds. Bounds 0-4")
            return False
        self.covert_lvl = lvl
        self.sd.change_lvl(self.covert_lvl)
        self.dd.change_lvl(self.covert_lvl)
        return True

    def exportData(self):
        if not self.devices:
            for d in self.devices:
                print()

    def importData(self, path):
        print()

    def text_devices(self):
        txt = ""
        for device in self.devices:
            txt = txt + device.general_text()
        return txt

    def text_detailed(self):
        txt = ""
        for device in self.devices:
            txt = txt + device.detail_text()
        return txt

    def text_services(self):
        txt = ""
        for device in self.devices:
            txt = txt + device.service_text()
        return txt

    def ips(self):
        txt = []
        for device in self.devices:
            txt.append(device.ip)
        return txt
