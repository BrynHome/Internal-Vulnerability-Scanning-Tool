from scapy.layers.inet import IP, ICMP
import ipcalc
from scapy.layers.l2 import arping, Ether, ARP
from scapy.sendrecv import srp
from core.Scanning.Core.Device import Device


class deviceDiscover:

    def __init__(self, sub_net, lvl=3):
        self.net = sub_net
        self.lvl = 1
        if not self.change_lvl(lvl):
            self.lvl = 1

    def change_net(self, sub_net):
        self.net = sub_net

    def change_lvl(self, lvl):
        if lvl == 0:
            self.lvl = 30
        elif lvl == 1:
            self.lvl = 15
        elif lvl == 2:
            self.lvl = 2
        elif lvl == 3:
            self.lvl = 0.2
        elif lvl == 4:
            self.lvl = 0.1
        elif lvl == 5:
            self.lvl = 0.1
        else:
            return False
        return True

    def scan(self):
        devices = []
        print("Starting Scan of Network address space of " + self.net)
        for a in ipcalc.Network(self.net):
            res = self.specific_scan(str(a))
            if res:
                print("Host discovered at " + res.ip)
                devices.append(res)
        return devices

    def specific_scan(self, ip):
        ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=ip), timeout=self.lvl, verbose=0)
        if len(ans.res) >= 1:
            return Device(ans.res[0].answer.payload.psrc, ans.res[0].answer.src)
        else:
            return False
