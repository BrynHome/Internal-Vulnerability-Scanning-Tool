from scapy.layers.inet import IP, ICMP
from scapy.layers.l2 import arping, Ether, ARP
from scapy.sendrecv import srp
from core.Scanning.Core.Device import Device



class deviceDiscover:

    def __init__(self, sub_net, lvl=2):
        self.net = sub_net
        self.lvl = 0
        self.change_lvl(lvl)

    def change_net(self, sub_net):
        self.net = sub_net

    def change_lvl(self, lvl):
        if lvl == 0:
            self.lvl = 10
        elif lvl == 1:
            self.lvl = 5
        elif lvl == 2:
            self.lvl = 2
        elif lvl == 3:
            self.lvl = 1
        elif lvl == 4:
            self.lvl = 0.5
        else:
            self.lvl = 0.2

    def scan(self):
        devices = []
        print("Network address of " + self.net)
        # for ips in subnet
        # out = arping(self.net)
        # ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst="192.168.1.70"), timeout=2)
        # ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst="192.168.1.0/24"), timeout=2)
        # ans.summary(lambda s, r: r.sprintf("%Ether.src% %ARP.psrc%"))
        responses = {}
        ip_base = self.net.rsplit('.', 1)[0] + '.'
        for a in range(0, 255):
            ip = ip_base + str(a)
            print("Device: " + ip)
            ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=ip), timeout=self.lvl)
            if len(ans.res) >= 1:
                responses[ans.res[0].answer.src] = ans.res[0].answer.payload.psrc
        for b in responses:
            print(b + " " + responses[b])
            devices.append(Device(responses[b], b))
        return devices

"""
a = deviceDiscover("192.168.1.0/24", 3)
a.scan()
print(a.devices[0].ip)
b = serviceDiscov.service_Discover(a.devices[0])
b.scan()
print(b.scanner.csv())
"""
