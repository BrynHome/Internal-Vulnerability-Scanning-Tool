from scapy.layers.inet import IP, ICMP
from scapy.layers.l2 import arping, Ether, ARP
from scapy.sendrecv import srp
from core.Scanning.Core.Device import Device


class deviceDiscover:

    def __init__(self, sub_net, l, h, lvl=2):
        self.net = sub_net
        self.lvl = 0
        self.change_lvl(lvl)
        self.low = l
        self.high = h

    def change_net(self, sub_net):
        self.net = sub_net

    def change_lvl(self, lvl):
        if lvl == 0:
            self.lvl = 10
        elif lvl == 1:
            self.lvl = 5
        elif lvl == 2:
            self.lvl = 2
        elif lvl == 3:
            self.lvl = 1
        elif lvl == 4:
            self.lvl = 0.5
        else:
            self.lvl = 0.2

    def scan(self):
        devices = []
        print("Starting Scan of Network address space of " + self.net)
        responses = {}
        ip_base = self.net.rsplit('.', 1)[0] + '.'
        for a in range(self.low, self.high):
            ip = ip_base + str(a)
            #print("Device: " + ip)
            ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=ip), timeout=self.lvl, verbose=0)
            if len(ans.res) >= 1:
                responses[ans.res[0].answer.src] = ans.res[0].answer.payload.psrc
                print("Host discovered at " + responses[ans.res[0].answer.src])
        for b in responses:
            devices.append(Device(responses[b], b))
        return devices

    def specific_scan(self, ip):
        print("Starting Scan of Network address " + ip)
        ans, unans = srp(Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=ip), timeout=self.lvl, verbose=0)
        if len(ans.res) >= 1:
            return Device(ans.res[0].answer.payload.psrc, ans.res[0].answer.src)
        else:
            return False
