import re

from nmap import PortScanner

from core.Scanning.Core import Device
from core.Scanning.Core import Service


def check_port_params(ports):
    if not re.search('-', ports):
        return False
    t = re.split('-', ports)
    if not t[0] or not t[1]:
        return False
    if not t[0].isdigit() or not t[1].isdigit():
        return False
    if int(t[0]) > int(t[1]):
        return False
    if int(t[0]) < 1:
        return False
    if int(t[1]) > 65535:
        return False
    return True


class serviceDiscover:

    def __init__(self, lvl=2, tcp_range="1-1024", udp_range="1-1024"):
        self.scanner = PortScanner()
        self.lvl = 0
        self.tcp_range = tcp_range
        self.udp_range = udp_range
        self.change_lvl(lvl)

    def change_tcpRange(self, t_range):
        self.tcp_range = t_range

    def change_udpRange(self, u_range):
        self.udp_range = u_range

    def change_lvl(self, lvl):
        if lvl == 0:
            self.lvl = 10
        elif lvl == 1:
            self.lvl = 5
        elif lvl == 2:
            self.lvl = 2
        elif lvl == 3:
            self.lvl = 1
        elif lvl == 4:
            self.lvl = 0.5
        else:
            self.lvl = 0.2

    def scan(self, device: Device):
        print(device.ip + "\nStarting TCP scan...")
        res = self.tcp_scan(self.tcp_range, device)
        if not res[1]:
            return res[0], False
        report = device.ip + '\nTCP: ' + res[0] + '\n'
        print("Starting UDP scan...")
        res = self.udp_scan(self.udp_range, device)
        report = report + 'UDP: ' + res[0]
        if not res[1]:
            return report, False
        return report, True

    def udp_scan(self, ports, device: Device):
        udp_args = '-sU ' + '-A ' + str(self.lvl) + ' -p ' + ports
        udp_res = self.scanner.scan(device.ip, arguments=udp_args)
        if not udp_res['scan']:
            if 'error' in udp_res['nmap']['scaninfo']:
                noesc = re.split(r'\n', udp_res['nmap']['scaninfo']['error'][0])
                return "Error in scan parameters. " + noesc[0], False
            if udp_res['nmap']['scanstats']['uphosts'] == '0':
                return "Could not reach device", False
        if 'udp' not in udp_res['scan'][device.ip]:
            return "No open ports within set parameters found", True
        if udp_res['scan'][device.ip]['osmatch']:
            if device.os_acc < int(udp_res['scan'][device.ip]['osmatch'][0]['accuracy']):
                device.os = udp_res['scan'][device.ip]['osmatch'][0]['name']
                device.os_acc = int(udp_res['scan'][device.ip]['osmatch'][0]['accuracy'])
        for a in udp_res['scan'][device.ip]['udp']:
            tmp = udp_res['scan'][device.ip]['udp'][a]
            device.add_udp_service(
                Service.Service(a, tmp['version'], tmp['name'], tmp['product'], tmp['extrainfo'],
                                tmp['cpe'], tmp['state']))
        return "Scan Complete", True

    def tcp_scan(self, ports, device: Device):
        tcp_args = '-A ' + str(self.lvl) + ' -p ' + ports + ' -sV -O'
        tcp_res = self.scanner.scan(device.ip, arguments=tcp_args)
        if not tcp_res['scan']:
            if 'error' in tcp_res['nmap']['scaninfo']:
                noesc = re.split(r'\n', tcp_res['nmap']['scaninfo']['error'][0])
                return "Error in scan parameters. " + noesc[0], False
            if tcp_res['nmap']['scanstats']['uphosts'] == '0':
                return "Could not reach device", False
        if 'tcp' not in tcp_res['scan'][device.ip]:
            return "No responses in port range", True
        if tcp_res['scan'][device.ip]['osmatch']:
            if device.os_acc < int(tcp_res['scan'][device.ip]['osmatch'][0]['accuracy']):
                device.os = tcp_res['scan'][device.ip]['osmatch'][0]['name']
                device.os_acc = int(tcp_res['scan'][device.ip]['osmatch'][0]['accuracy'])

        for a in tcp_res['scan'][device.ip]['tcp']:
            tmp = tcp_res['scan'][device.ip]['tcp'][a]
            if not tmp['product']:
                tmp['product'] = tmp['name']
            if a == 80 or a == 443:
                if tmp['extrainfo']:
                    bad_chars = ['(',')','[',']','{','}']
                    for i in bad_chars:
                        tmp['extrainfo'] = tmp['extrainfo'].replace(i, '')
                    tmp['extrainfo'] = tmp['extrainfo'].split(' ')
                    for k in range(len(tmp['extrainfo'])):
                        tmp['extrainfo'][k] = tmp['extrainfo'][k].split('/')
                        if len(tmp['extrainfo'][k]) < 2:
                            tmp['extrainfo'][k].append("")
            device.add_tcp_service(Service.Service(a, tmp['version'], tmp['name'], tmp['product'], tmp['extrainfo'],
                                                   tmp['cpe'], tmp['state']))
        return "Scan Complete", True
