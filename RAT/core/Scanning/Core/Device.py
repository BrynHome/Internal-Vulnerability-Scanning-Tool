from core.Scanning.Core.Service import Service


def port_text(services):
    res = ""
    for s in services:
        res = res + str(s.port) + ","
    return res.strip(",")


def open_port_text(services):
    res = ""
    for s in services:
        if s.state == 'open':
            res = res + str(s.port) + ","
    return res.strip(",")


def not_open_port_text(services):
    res = ""
    for s in services:
        if s.state != 'open':
            res = res + str(s.port) + ","
    return res.strip(",")


class Device:

    def __init__(self, ip, mac):
        self.ip = ip
        self.mac = mac
        self.suspected_os = ""
        self.os_acc = 0
        # Replace with hashmaps for the future?
        self.tcp_services = []
        self.udp_services = []
        # self.fileshare_services = []
        # self.other_services = []

    def general_text(self):
        text = ("------\n"
                "IP:" + self.ip + "\n"
                "MAC:" + self.mac + "\n"
                "OS (Suspected):" + self.suspected_os + "\n"
                "Current OS Accuracy:" + str(self.os_acc) + "\n"
                "Scanned TCP Ports:" + port_text(self.tcp_services) + "\n"
                "Open TCP Ports:" + open_port_text(self.tcp_services) + "\n"
                "Closed TCP Ports:" + not_open_port_text(self.tcp_services) + "\n"
                "Scanned UDP Ports:" + port_text(self.udp_services) + "\n"
                "Open UDP Ports:" + open_port_text(self.udp_services) + "\n"
                "Closed UDP Ports:" + not_open_port_text(self.udp_services) + "\n------")
        return text

    def report_text(self):
        text = [
            "IP:" + self.ip,
            "MAC:" + self.mac,
            "OS (Suspected):" + self.suspected_os,
            "Current OS Accuracy:" + str(self.os_acc),
            "Scanned TCP Ports:" + port_text(self.tcp_services),
            "Open TCP Ports:" + open_port_text(self.tcp_services),
            "Closed TCP Ports:" + not_open_port_text(self.tcp_services),
            "Scanned UDP Ports:" + port_text(self.udp_services),
            "Open UDP Ports:" + open_port_text(self.udp_services),
            "Closed UDP Ports:" + not_open_port_text(self.udp_services)]
        return text

    def service_text(self):
        text = ("@@@@@@\n"
                "Device IP:" + self.ip + "\n"
                                         "||||||||\n"
                                         "TCP Services\n------\n")
        for s in self.tcp_services:
            text = text + s.text() + "//////\n"
        text = text + ("------\n"
                       "UDP Services\n------\n")
        for s in self.udp_services:
            text = text + s.text() + "//////\n"
        text = text + ("------\n"
                       "||||||\n"
                       "@@@@@@\n")
        return text

    def detail_text(self):
        return self.general_text() + self.service_text()

    def add_tcp_service(self, s):
        for service in self.tcp_services:
            if service.port == s.port and service.name == s.name:
                service = s
                return service, False
        self.tcp_services.append(s)
        return s, True

    def add_udp_service(self, s):
        for service in self.udp_services:
            if service.port == s.port and service.name == s.name:
                service = s
                return service, False
        self.udp_services.append(s)
        return s, True
